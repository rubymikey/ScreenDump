unit capture;

{$mode objfpc}{$H+}

interface


uses
  Classes, forms, SysUtils, Graphics, lclintf, lcltype, clipbrd, math, mouse ,icon, debug;
type
    tScreenCapture = class

       public
       MousePosition: TPoint;


       procedure CaptureScreen(showMouse: boolean = false);
       procedure CaptureArea(area: tRect; showMouse: boolean = false; outer: boolean = false);
       procedure SaveCapture();

       protected
       image: TBitmap;
       //jpg: TJpegImage;
       targetRect: tRect;
       sourceRect: tRect;
       fileName: ansistring;
       MouseShow: Boolean;

       procedure CreateFileName();
       Procedure TakeCapture();
       procedure SaveToClipboard;
       //procedure ImageChangeEvent(Sender: TObject);
      end;


implementation
{
procedure tScreenCapture.ImageChangeEvent(Sender: TObject);
begin
    // SaveToClipboard;
    // saveCapture;

end; }


procedure tScreenCapture.CaptureArea(area: tRect; showMouse: boolean = false; outer: boolean = false);
var
  Borderwidth, BorderHeight, BorderTitle: integer;
  MouseAdjustedPosition: TPoint;



begin
     BorderWidth:=  GetSystemMetrics(SM_CXSIZEFRAME); //Border Width
     BorderHeight:=  GetSystemMetrics(SM_CYSIZEFRAME) ; //Border Height
     BorderTitle:=  GetSystemMetrics(SM_CYCAPTION);
     self.image:=tBitmap.Create;

     if outer then
     begin
          //outer borders
          self.sourceRect.Left:= math.Max(area.Left , screen.Desktoprect.Left);
          self.SourceRect.Top:= math.Max(area.Top, screen.DesktopRect.top);
          self.SourceRect.Right:= math.Min((area.Right + (2 * BorderWidth)), screen.DesktopRect.right);
          self.SourceRect.Bottom:= math.Min((area.Bottom + (2 * BorderHeight) + BorderTitle), screen.DesktopRect.Bottom);
          //Adjust mouse position with the borders
          MouseAdjustedPosition.y:= (self.mousePosition.y + BorderHeight + BorderTitle);
          MouseAdjustedPosition.x:= (self.mousePosition.x + BorderWidth);
     end
     else
     begin
        //inner borders
        self.sourceRect.Left:= math.Max(area.Left + BorderWidth , screen.Desktoprect.Left);
        self.SourceRect.Top:= math.Max(area.Top + BorderTitle + BorderHeight , screen.DesktopRect.top);

        self.SourceRect.Right:= math.Min(area.Right + BorderWidth , screen.DesktopRect.right);
        self.SourceRect.Bottom:= math.Min(area.Bottom + BorderTitle + BorderHeight , screen.DesktopRect.Bottom);
        MouseAdjustedPosition.y:= (self.mousePosition.y );
        MouseAdjustedPosition.x:= (self.mousePosition.x);
     end;

     self.image.Width:= (SourceRect.Right - SourceRect.left );
     self.image.Height:= (SourceRect.Bottom - SourceRect.Top);

     self.targetRect:= Rect(0,0,self.image.Width, self.image.Height);
     self.MouseShow:=ShowMouse;
     self.CreateFileName();

     self.TakeCapture();



     if true then
     begin
       icon.DrawCursor(self.image.Canvas, MouseAdjustedPosition);
     end;

end;

procedure tScreenCapture.CaptureScreen(showMouse: boolean = false);
begin

     //Bitmap copy
       self.sourceRect:=screen.DesktopRect;
       self.image:=tBitmap.Create;
       self.image.Width:= (screen.DesktopRect.Right - screen.DesktopRect.Left);
       self.image.Height:= (screen.DesktopRect.Bottom - screen.DesktopRect.Top);
       self.targetRect:= Rect(0,0,self.image.Width, self.image.Height);

     {//JPG Copy
     self.jpg:=tJpegImage.Create;
     self.jpg.SetSize((screen.DesktopRect.Right - screen.DesktopRect.Left),(screen.DesktopRect.Bottom - screen.DesktopRect.Top));
     self.targetRect:= Rect(0,0,self.jpg.Width, self.jpg.Height);
     }

     self.sourceRect:= screen.DesktopRect;
     self.MouseShow:=ShowMouse;

     self.TakeCapture();

     if true then
     begin
       icon.DrawCursor(self.image.Canvas, self.MousePosition );
     end;

end;

procedure tScreenCapture.TakeCapture();
var
  c: TCanvas;

begin

     c:= TCanvas.Create;
     c.Handle := GetDC(0);

     self.image.Canvas.CopyRect(self.targetRect, c, self.sourceRect); //BITMAP
     //self.jpg.Canvas.CopyRect(self.targetRect, c, self.sourceRect); //JPEG
     ReleaseDC(0, c.Handle);
     c.FreeInstance;

end;


Procedure tScreenCapture.CreateFileName();
 var
    aFilePath: String;
    aFileName: String;
    aFileRevision: byte;
    aFullFilePathName: String;
 begin
   try
     begin
        aFilePath:=debug.GetCurrentFolderPath();
        aFileRevision:=0;

        aFileName:= FormatDateTime('\hh.mm.ss',Now)  ;

        aFullFilePathName:=aFilePath + aFileName +  '.jpg';

        while fileExists(aFullFilePathName) do
            begin
                 aFileRevision:=(aFileRevision + 1);
                 aFullFilePathName:=aFilePath + aFileName + '(' + IntToStr(aFileRevision) + ')' + '.jpg';
            end;
     end;
   finally
   end;
   self.fileName:=aFullFilePathName;
   aFileName:='';
   aFullFilePathName:='';


 end;

procedure tScreenCapture.SaveCapture();
Var

  aJPG: TJpegImage;

Begin
     self.CreateFileName();

     aJPG:=TJpegImage.Create;
     aJPG.Assign(self.image);

     aJPG.SaveToFile(self.fileName);
     self.SaveToClipboard;

     self.image.FreeImage;
     self.image.Free;
     self.image:=nil;
     aJPg.FreeImage;
     aJPG.Free;
     aJPG:=nil;

end;

procedure tScreenCapture.SaveToClipboard();
begin
     Clipboard.Assign(self.Image);
end;


end.

